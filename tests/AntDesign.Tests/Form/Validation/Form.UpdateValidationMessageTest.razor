@inherits AntDesignTestBase

@code {
    class Model
    {
        public string? ValidateField { get; set; }
    }
    Model _model = new();
    Form<Model>? form;
    FormItem? formItem;
    ValidationMessageStore? validationMessageStore;
    [Fact]
    public void Form_UpdateValidateMessage()
    {
        //Arrange
        JSInterop.Setup<AntDesign.JsInterop.Window>(JSInteropConstants.GetWindow)
    .SetResult(new AntDesign.JsInterop.Window());
        var onEditContextChanged = (EditContext e) =>
        {
    validationMessageStore = new ValidationMessageStore(e);
    form!.UpdateValidateMessage();
        };
        var cut = Render(
    @<Form Model="@_model" @ref="form" OnEditContextChanged="onEditContextChanged" >
        <FormItem @ref="formItem"> <AntDesign.Input @bind-Value=@_model.ValidateField /></FormItem>
        <FormItem >
            <Button Type="@ButtonType.Primary" HtmlType="submit">
                Submit
            </Button>
        </FormItem>
    </Form>
    );
        var filed = form!.EditContext.Field(nameof(_model.ValidateField));
        validationMessageStore = new ValidationMessageStore(form!.EditContext);
        validationMessageStore.Add(filed, "Error message");
        form.UpdateValidateMessage(filed);
        Assert.True(formItem!.IsExistError("Error message"));
        form.BuildEditContext();
        filed = form!.EditContext.Field(nameof(_model.ValidateField));
        Assert.True(!formItem!.IsExistError("Error message"));
        validationMessageStore.Add(filed, "New Error message");
        formItem.UpdateValidateMessage();
        Assert.True(formItem!.IsExistError("New Error message"));
        validationMessageStore.Add(filed, "New Error message2");
        form.UpdateValidateMessage();
        Assert.True(formItem!.IsExistError("New Error message2"));
    }
}
